{"version":3,"file":"jsRewriter.js","sources":["webpack://aero-sandbox/./src/sandboxers/JS/backends/AST.ts","webpack://aero-sandbox/./src/sandboxers/JS/backends/AeroGel.ts","webpack://aero-sandbox/./src/sandboxers/JS/JSRewriter.ts"],"sourcesContent":["import type {\n\tastParser,\n\tastWalker,\n\tASTRewriterConfig\n} from \"../../../../types/aeroSandbox\";\n\n// Parsers\n// import initWasm, { parseSync } from \"@oxc-parser/wasm\";\nimport { parse } from \"seafox\";\n\n// Walkers\nimport traverse from \"traverse-the-universe\";\n\n// AST -> JS\n// This is the only realistic option\nimport { generate, type Node } from \"astring\";\n\n// Webpack Feature Flags\n// biome-ignore lint/style/useSingleVarDeclarator: <explanation>\nlet INCLUDE_AST_PARSER_OXC: boolean, INCLUDE_AST_PARSER_SEAFOX: boolean;\nlet INCLUDE_AST_WALKER_TRAVERSE_THE_UNIVERSE: boolean;\n\n/*\n// Scope Checking. This is for DPSC. TODO: Make DPSC configurable on AST parsing and only use it when in a block scope.\n$aero.check = val => (val === location ? $location : val);\n*/\n\nexport default class ASTRewriter {\n\tconfig: ASTRewriterConfig;\n\tparentNode: boolean;\n\tconstructor(config: ASTRewriterConfig) {\n\t\tthis.config = config;\n\t}\n\tapplyNewConfig(config: ASTRewriterConfig) {\n\t\tthis.config = config;\n\t}\n\t// These two methods are here because it is possible to compile out the AST parsers and walkers that the user chooses in the build flags\n\tstatic supportedParsers(): astParser[] {\n\t\tconst supports: astParser[] = [];\n\t\tif (INCLUDE_AST_PARSER_OXC) supports.push(\"oxc\");\n\t\tif (INCLUDE_AST_PARSER_SEAFOX) supports.push(\"seafox\");\n\t\treturn supports;\n\t}\n\tstatic supportedWalkers(): astWalker[] {\n\t\tconst supports: astWalker[] = [];\n\t\tif (INCLUDE_AST_WALKER_TRAVERSE_THE_UNIVERSE)\n\t\t\tsupports.push(\"traverse_the_universe\");\n\t\treturn supports;\n\t}\n\t/**\n\t * I recomend using (@link https://astexplorer.net) to guide you when coming up with ideas of how to rewrite the AST\n\t * @param ast - The AST tree\n\t * @returns the rewritten script\n\t */\n\trewriteFromAst(ast: Node, windowProxyConcealmentAst: Node): Node {\n\t\tif (INCLUDE_AST_WALKER_TRAVERSE_THE_UNIVERSE) {\n\t\t\t// traverse-the-universe has no typings\n\t\t\ttraverse(ast, node => {\n\t\t\t\tif (node.type === \"Identifier\" && node.name === \"location\") {\n\t\t\t\t\t// TODO: Include more checks to ensure that this is the proper `location` that we want to rewrite\n\t\t\t\t\tnode.name = this.config.objPaths.proxy.location;\n\t\t\t\t}\n\t\t\t\tif (node.type === \"Identifier\" && node.name === \"window\") {\n\t\t\t\t\t// TODO: Include more checks to ensure that this is the proper `window` that we want to rewrite\n\t\t\t\t\tnode.name = this.config.objPaths.proxy.window;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tnode.type === \"Identifier\" &&\n\t\t\t\t\tnode.name === \"that\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.type === \"FunctionExpression\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.parentNode.type === \"Property\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.parentNode.key.type === \"Identifier\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.parentNode.key.name === \"apply\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.parentNode.parentNode ===\n\t\t\t\t\t\t\"ObjectExpression\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.parentNode.parentNode.parentNode ===\n\t\t\t\t\t\t\"NewExpression\" &&\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.parentNode.parentNode.parentNode.callee\n\t\t\t\t\t\t.name === \"Proxy\"\n\t\t\t\t) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.parentNode.body.insertAfter(windowProxyConcealmentAst);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t$aero.logger.warn(\"No suitable AST walkers found; not rewriting!\");\n\t\t}\n\t\t$aero.logger.fatalErr(\"AeroGel minimal is unsupported at the moment!\");\n\t\treturn ast;\n\t}\n\tparseAst(script: string, isModule: boolean): [Node, Node] {\n\t\tif (INCLUDE_AST_PARSER_OXC) {\n\t\t\t/** @see (@link https://www.npmjs.com/package/@oxc-parser/wasm?activeTab=readme) */\n\t\t\t$aero.logger.fatalErr(\"OXC is unsupported at the moment!\");\n\t\t}\n\t\tif (INCLUDE_AST_PARSER_SEAFOX) {\n\t\t\treturn [\n\t\t\t\t// @ts-ignore\n\t\t\t\tparse(script, {\n\t\t\t\t\tmodule: isModule,\n\t\t\t\t\tnext: true\n\t\t\t\t}).body as Node,\n\t\t\t\t// @ts-ignore\n\t\t\t\tparse(\n\t\t\t\t\t/** js  */ `\n\t\t\t\t\tif (that === window) {\n\t\t\t\t\t\tthat = window;\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmodule: isModule,\n\t\t\t\t\t\tnext: true\n\t\t\t\t\t}\n\t\t\t\t).body as Node\n\t\t\t];\n\t\t}\n\t}\n\trewriteScript(script: string, isModule: boolean): string {\n\t\tconst [ast, windowProxyConcealmentAst] = this.parseAst(\n\t\t\tscript,\n\t\t\tisModule\n\t\t);\n\t\tconst rewrittenAst = this.rewriteFromAst(\n\t\t\tast,\n\t\t\twindowProxyConcealmentAst\n\t\t);\n\t\treturn generate(rewrittenAst);\n\t}\n}\n","import type {\n\tAeroGelConfig,\n\taerogelParser,\n\tkeywordReplacementType\n} from \"../../../../types/aeroSandbox\";\n\n//import esniff from \"esniff\";\n\n// Webpack Feature Flags\nvar INCLUDE_ESNIFF: boolean;\n\n// TODO: Setup test cases\nexport default class AeroGel {\n\tconfig: AeroGelConfig;\n\tconstructor(config: AeroGelConfig) {\n\t\tthis.config = config;\n\t}\n\tapplyNewConfig(config: AeroGelConfig) {\n\t\tthis.config = config;\n\t}\n\tstatic supportedParsers(): aerogelParser[] {\n\t\tconst supports: aerogelParser[] = [];\n\t\tif (INCLUDE_ESNIFF) supports.push(\"esniff\");\n\t\treturn supports;\n\t}\n\t/** This essentially the rewriter\n\t * @param script The script to jail. Before it is jailed the let/const to fake vars RegExp rewriting occurs.\n\t * @param isModule Module scripts don't need to be rewritten because they don't require fake vars for scope emulation since module scripts run in their own isolated scope.\n\t * @example TODO: Provide an example\n\t */\n\tjailScript(script: string, isModule: boolean) {\n\t\treturn /* js */ `\n\t\t\t!() => {\n\t\t\t\t${isModule ? script : this.rewriteScript(script)}\n\t\t  \t}().call({\n\t\t\t\twindow: ${this.config.objPaths.proxy.window},\n\t\t\t\tglobalThis: ${this.config.objPaths.proxy.window},\n\t\t\t\tlocation: ${this.config.objPaths.proxy.location}\n\t\t \t });\n\t\t`;\n\t}\n\t/** This method is specifically for `var keyword rewriting` */\n\trewriteScript(script: string): string {\n\t\t/*\n\t\tif (INCLUDE_ESNIFF) {\n\t\t\tlet letIndicies = [];\n\t\t\tlet constIndicies = [];\n\t\t\t// @ts-ignore\n\t\t\tesniff(script, (emitter: any) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\temitter.on(\"trigger:let\", (accessor: any) => {\n\t\t\t\t\tif (accessor.scopeDepth === 0)\n\t\t\t\t\t\tletIndicies.push(accessor.index);\n\t\t\t\t});\n\t\t\t\temitter.on(\"trigger:const\", (accessor: any) => {\n\t\t\t\t\tif (accessor.scopeDepth === 0)\n\t\t\t\t\t\tconstIndicies.push(accessor.index);\n\t\t\t\t});\n\t\t\t});\n\t\t\tlet keywordReplacements: keywordReplacementType = {};\n\t\t\tletIndicies.forEach(index => {\n\t\t\t\tkeywordReplacements[index] = {\n\t\t\t\t\tkeywordLen: 3,\n\t\t\t\t\treplacementStr: this.config.objPaths.fakeVars.let,\n\t\t\t\t};\n\t\t\t});\n\t\t\tconstIndicies.forEach(index => {\n\t\t\t\tkeywordReplacements[index] = {\n\t\t\t\t\tkeywordLen: 5,\n\t\t\t\t\treplacementStr: this.config.objPaths.fakeVars.const,\n\t\t\t\t};\n\t\t\t});\n\t\t\tscript = this.replaceKeywords(script, keywordReplacements);\n\t\t}\n\t\t*/\n\t\treturn script;\n\t}\n\treplaceKeywords(\n\t\tstr: string,\n\t\tkeywordReplacements: keywordReplacementType\n\t): string {\n\t\tconst charArr = Array.from(str);\n\t\tlet totalAddedToIndex = 0;\n\t\tfor (const [indexStr, replacementData] of Object.entries(\n\t\t\tkeywordReplacements\n\t\t)) {\n\t\t\tconst { keywordLen, replacementStr } = replacementData;\n\t\t\tconst index = Number.parseInt(indexStr);\n\t\t\tconst replacementArr = Array.from(replacementStr);\n\t\t\ttotalAddedToIndex += replacementArr.length - keywordLen;\n\t\t\tcharArr.splice(\n\t\t\t\tindex + totalAddedToIndex,\n\t\t\t\tkeywordLen,\n\t\t\t\treplacementStr\n\t\t\t);\n\t\t}\n\t\treturn charArr.join(\"\");\n\t}\n}\n","import type {\n\tAeroJSParserConfig,\n\tRewriteOptions,\n\taerogelParser,\n\tastParser,\n\tastWalker\n} from \"../../../types/rewriters/js\";\n\nimport ASTRewriter from \"./backends/AST\";\nimport AeroGel from \"./backends/AeroGel\";\n\nexport default class JSRewriter {\n\tconfig: AeroJSParserConfig;\n\tconstructor(config: AeroJSParserConfig) {\n\t\tthis.config = config;\n\t}\n\tapplyNewConfig(config: AeroJSParserConfig) {\n\t\tthis.config = config;\n\t}\n\trewriteScript(script: string, rewriteOptions: RewriteOptions): string {\n\t\tif (rewriteOptions.isModule) {\n\t\t\tif (this.config.modeModule === \"ast\")\n\t\t\t\treturn this.astRewrite(script, rewriteOptions.isModule);\n\t\t\tif (this.config.modeModule === \"aerogel\")\n\t\t\t\treturn this.aerogelRewrite(script, rewriteOptions.isModule);\n\t\t} else {\n\t\t\tif (this.config.modeDefault === \"ast\")\n\t\t\t\treturn this.astRewrite(script, rewriteOptions.isModule);\n\t\t\tif (this.config.modeDefault === \"aerogel\")\n\t\t\t\treturn this.aerogelRewrite(script, rewriteOptions.isModule);\n\t\t}\n\t\treturn script;\n\t}\n\t/** Calls the AST Rewriter with the config that you provided in the constructor earlier */\n\tastRewrite(script, isModule: boolean): string {\n\t\tlet parserOfChoice: astParser;\n\t\tlet walkerOfChoice: astWalker;\n\t\tfor (const astParser of this.config.preferredParsers.ast) {\n\t\t\tconst astSupportedParsers = ASTRewriter.supportedParsers();\n\t\t\tif (astParser in astSupportedParsers) {\n\t\t\t\tparserOfChoice = astParser;\n\t\t\t}\n\t\t}\n\t\tif (!parserOfChoice) {\n\t\t\t$aero.logger.fatalErr(\n\t\t\t\t\"No compatible AST parsers found with your preferred list of parsers!\"\n\t\t\t);\n\t\t\treturn script;\n\t\t}\n\t\tfor (const astWalker of this.config.preferredASTWalkers) {\n\t\t\tconst astSupportedWalkers = ASTRewriter.supportedWalkers();\n\t\t\tif (astWalker in astSupportedWalkers) walkerOfChoice = astWalker;\n\t\t}\n\t\tif (!walkerOfChoice) {\n\t\t\t$aero.logger.fatalErr(\n\t\t\t\t\"No compatible AST walkers found with your preferred list of walkers!\"\n\t\t\t);\n\t\t\treturn script;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tconst astRewriter = new ASTRewriter({\n\t\t\tparserConfig: {\n\t\t\t\tparser: parserOfChoice\n\t\t\t},\n\t\t\twalkerConfig: {\n\t\t\t\twalker: walkerOfChoice\n\t\t\t}\n\t\t});\n\t\treturn astRewriter.rewriteScript(script, isModule);\n\t}\n\taerogelRewrite(script, isModule: boolean): string {\n\t\tlet parserOfChoice: aerogelParser;\n\t\tfor (const aerogelParser of this.config.preferredParsers.aerogel) {\n\t\t\tconst aerogelSupportedParsers = AeroGel.supportedParsers();\n\t\t\tif (aerogelParser in aerogelSupportedParsers)\n\t\t\t\tparserOfChoice = aerogelParser;\n\t\t}\n\t\tif (!parserOfChoice)\n\t\t\t$aero.logger.fatalErr(\n\t\t\t\t\"No compatible AeroGel parsers found with your preferred list of parsers!\"\n\t\t\t);\n\n\t\t// @ts-ignore\n\t\tconst aerogelRewriter = new AeroGel({\n\t\t\tparserConfig: {\n\t\t\t\tparser: parserOfChoice\n\t\t\t}\n\t\t});\n\t\treturn aerogelRewriter.jailScript(script, isModule);\n\t}\n\t/** This is the method you want to use in your proxy */\n\twrapScript(script: string, rewriteOptions: RewriteOptions): string {\n\t\tconst lines = this.rewriteScript(script, rewriteOptions).split(\"\\n\");\n\n\t\tconst [first] = lines;\n\n\t\tconst _meta = rewriteOptions.isModule\n\t\t\t? `${this.config.proxyNamespace}.moduleScripts.resolve`\n\t\t\t: \"\";\n\n\t\tlines[0] = rewriteOptions.insertCode + _meta + first;\n\n\t\treturn lines.join(\"\\n\");\n\t}\n}\n"],"names":["parse","traverse","generate","INCLUDE_AST_PARSER_OXC","INCLUDE_AST_PARSER_SEAFOX","INCLUDE_AST_WALKER_TRAVERSE_THE_UNIVERSE","ASTRewriter","config","applyNewConfig","rewriteFromAst","ast","windowProxyConcealmentAst","node","type","name","objPaths","proxy","location","window","parentNode","key","callee","body","insertAfter","$aero","logger","warn","fatalErr","parseAst","script","isModule","module","next","rewriteScript","_this_parseAst","rewrittenAst","supportedParsers","supports","push","supportedWalkers","INCLUDE_ESNIFF","AeroGel","jailScript","concat","replaceKeywords","str","keywordReplacements","charArr","Array","from","totalAddedToIndex","_iteratorError","Object","entries","indexStr","replacementData","keywordLen","replacementStr","index","Number","parseInt","replacementArr","length","splice","join","JSRewriter","rewriteOptions","modeModule","astRewrite","aerogelRewrite","modeDefault","parserOfChoice","walkerOfChoice","preferredParsers","astParser","astSupportedParsers","_iteratorError1","preferredASTWalkers","astWalker","astSupportedWalkers","astRewriter","parserConfig","parser","walkerConfig","walker","aerogel","aerogelParser","aerogelSupportedParsers","aerogelRewriter","wrapScript","lines","split","_lines","first","_meta","proxyNamespace","insertCode"],"mappings":"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"}